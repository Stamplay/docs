<h1 id="code-blocks">Code Blocks</h1>
<p>When it comes to handle complex logic application, Flows may not be enough, and the need for a bit of custom logic becomes greater.</p>

<p>Code Blocks make this possible. With Code Blocks, you can add custom NodeJS server side logic when necessary, and let us do the heavily lifting when it's not.</p>

<h2 id="setup">Setup</h2>

<p>To create a Code Block:</p>

<ul>
  <li>Open the <strong>Code Blocks</strong> section and click on <strong>+Add</strong>;</li>
  <li>Insert a name for your code and press <strong>Enter</strong>.</li>
</ul>

<p><a href="../images/codeblock_new.png"><img alt="New Code Block" src="/images/codeblock_new.png" /></a></p>

<p>Stamplay generates a RESTful endpoint, whenever you create a Code Block.</p>

<p><a href="../images/codeblock_landing.png"><img alt="New Code Block" src="/images/codeblock_landing.png" /></a></p>

<h2 id="programming-models">Programming Models</h2>

<p>There are three ways of writing custom server side code based on your needs:</p>

<ul>
  <li>
    <p><a href="#simple-model">Simple</a> : when you do not need any external parameters, or the use of the incoming request body..</p>
  </li>
  <li>
    <p><a href="#contextual-model">Contextual</a>: when you need to access request body, query parameters and/or secrets.</p>
  </li>
  <li>
    <p><a href="#full-control-model">Full Control</a>: when you need access to the raw request and response.</p>
  </li>
</ul>

<aside class="warning">
  <p>All your code <strong>MUST</strong> be inside the main function, everything written outside will break your Code Block.</p>
</aside>

<h3 id="simple-model">Simple Model</h3>

<pre class="highlight nodejs-always"><code>  <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">cb</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">cb</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="p">{</span> <span class="na">i_am</span><span class="p">:</span> <span class="s1">'done'</span><span class="p">});</span>
  <span class="p">}</span>
</code></pre>

<p>Within the <strong>Simple</strong> programming model, you must provide JavaScript code that returns a function which accepts a single argument: a callback.</p>

<p>To indicate completion, the function must call the callback with two arguments: an error, and the result.</p>

<p>The result, or the second argument in the callback, will be the response to the originating request, or the destination <em>(i.e. Execution of a Task after a Code Block executes.)</em> request body.</p>

<p>When the callback is invoked, the result value or an error will be serialized as JSON and sent back to the caller as <code>application/json</code> content type.</p>

<h3 id="contextual-model">Contextual Model</h3>

<pre class="highlight nodejs-always"><code>  <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="nx">cb</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">cb</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="p">{</span> <span class="na">hello</span><span class="p">:</span> <span class="nx">context</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">name</span> <span class="p">});</span>
  <span class="p">}</span>
</code></pre>
<p>A more advanced version of the programming model allows you to return a function that accepts two arguments: a <code>context</code> and a <code>callback</code>.</p>

<p>The <code>context</code> parameter is a JavaScript object with data and optionally body properties.
The <code>context.data</code> is a JavaScript object that combines parameters passed to the code using one of several mechanisms:</p>

<ul>
  <li>The <a href="#app-secrets">secrets</a> that you've defined in the Stamplay Editor.</li>
  <li>The URL query parameters of the request.</li>
  <li>The key value pairs passed in the request body.</li>
</ul>

<p>The request can be parsed correctly only if <code>application/json</code> or <code>application/x-www-form-urlencoded</code> is used as <code>content-type</code>.</p>

<h3 id="full-control-model">Full Control Model</h3>

<pre class="highlight nodejs-always"><code>  <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span> <span class="s1">'Content-Type'</span><span class="p">:</span> <span class="s1">'application/json'</span><span class="p">});</span>
    <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">"hello"</span> <span class="p">:</span> <span class="nx">context</span><span class="p">.</span><span class="nx">body</span> <span class="p">};</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">result</span><span class="p">));</span>
  <span class="p">};</span>
</code></pre>

<p>The most flexible programming model allows you to take full control over the HTTP <code>request</code> and <code>response</code>.</p>

<p>The <code>context</code> argument behaves the same way as in the two simpler programming models.</p>

<p>Note that this programming model does not have a concept of a callback. <a href="https://nodejs.org/api/http.html">Ending the HTTP response</a> indicates completion.</p>

<h2 id="executing-code-blocks">Executing Code Blocks</h2>

<p>Code Blocks can be used to implement custom logic and have it available as an API endpoint, for this reason they support any HTTP method. In a nutshell you can execute custom Node.js code with a HTTP call.</p>

<p>To execute a Code Block all you need to do is to send a HTTP request to the Code Block API endpoint that you can see in the Snippets.</p>

<p>Depending from the HTTP method, you can pass data to the Code block within the body of the request or via query params (see below).</p>

<pre class="highlight shell"><code>  curl -X <span class="s2">"POST"</span> <span class="s2">"https://APPID.stamplayapp.com/api/codeblock/v1/run/{codeblock_name}?name=Stamplay&amp;bar=foo"</span> <span class="se">\</span>
  -H <span class="s2">"Content-Type: application/json"</span> <span class="se">\</span>
  -d <span class="s2">"{</span><span class="se">\"</span><span class="s2">message</span><span class="se">\"</span><span class="s2">:</span><span class="se">\"</span><span class="s2">Hello</span><span class="se">\"</span><span class="s2">}"</span>
</code></pre>

<pre class="highlight javascript"><code>  <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">{</span> <span class="na">message</span> <span class="p">:</span> <span class="s2">"Hello"</span><span class="p">}</span>
  <span class="kd">var</span> <span class="nx">params</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span> <span class="p">:</span> <span class="s2">"Stamplay"</span><span class="p">,</span> <span class="na">bar</span> <span class="p">:</span> <span class="s2">"foo"</span><span class="p">}</span>

  <span class="c1">//Stamplay.Codeblock("codeblock_name").run() sends a POST request by default</span>

  <span class="nx">Stamplay</span><span class="p">.</span><span class="nx">Codeblock</span><span class="p">(</span><span class="s2">"codeblock_name"</span><span class="p">).</span><span class="nx">run</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">params</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// success</span>
  <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// error</span>
  <span class="p">})</span>
</code></pre>

<pre class="highlight nodejs"><code>  <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">{</span> <span class="na">message</span> <span class="p">:</span> <span class="s2">"Hello"</span><span class="p">}</span>
  <span class="kd">var</span> <span class="nx">params</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span> <span class="p">:</span> <span class="s2">"Stamplay"</span><span class="p">}</span>

  <span class="c1">//Stamplay.Codeblock("codeblock_name").run() sends a POST request by default</span>

  <span class="nx">Stamplay</span><span class="p">.</span><span class="nx">Codeblock</span><span class="p">(</span><span class="s2">"codeblock_name"</span><span class="p">).</span><span class="nx">run</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">params</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// manage the response and the error</span>
  <span class="p">})</span>
</code></pre>

<h3 id="passing-query-parameters-to-code-blocks">Passing query parameters to Code Blocks</h3>

<p>You can pass paramaters to the Code Block using URL query string of the Code Block request. All URL query parameters except the reserved ones (e.g. <code>user</code>) will be propagated to the code when it runs. To take advantage of this feature, define your JavaScript function such that it accepts two arguments instead of one: the <code>context</code> and the callback <code>cb</code>.</p>

<p>All allowed URL query parameters of the Code Block request will be provided to the Code Block code in the form of <code>context.data</code> JavaScript object.</p>

<pre class="highlight shell"><code>Switch to Javascript or NodeJS view to see the Code Block sample
</code></pre>

<pre class="highlight javascript"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="nx">cb</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">cb</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="s2">"Hello, "</span> <span class="o">+</span> <span class="nx">context</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
<span class="p">}</span>
</code></pre>

<pre class="highlight nodejs"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="nx">cb</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">cb</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="s2">"Hello, "</span> <span class="o">+</span> <span class="nx">context</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
<span class="p">}</span>
</code></pre>

<h4 id="try-it-out">Try it out</h4>

<p>You can try it out with <code>curl</code> or with our SDKs. Usually query parameters are passed when using <code>GET</code> requests so the examples show how to execute a Code Block with a GET request:</p>

<pre class="highlight shell"><code>curl -X <span class="s2">"GET"</span> <span class="s2">"https://APPID.stamplayapp.com/api/codeblock/v1/run/{codeblock_name}?name=Stamplay"</span> <span class="se">\</span>
  -H <span class="s2">"Content-Type: application/json"</span> <span class="se">\</span>
</code></pre>

<pre class="highlight javascript"><code>  <span class="kd">var</span> <span class="nx">params</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span> <span class="p">:</span> <span class="s2">"Stamplay"</span><span class="p">}</span>
  <span class="c1">//GET</span>
  <span class="nx">Stamplay</span><span class="p">.</span><span class="nx">Codeblock</span><span class="p">(</span><span class="s2">"codeblock_name"</span><span class="p">).</span><span class="nx">get</span><span class="p">(</span><span class="nx">params</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// manage the response and the error</span>
  <span class="p">})</span>
</code></pre>

<pre class="highlight nodejs"><code>  <span class="c1">//GET</span>
  <span class="kd">var</span> <span class="nx">params</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span> <span class="p">:</span> <span class="s2">"Stamplay"</span><span class="p">}</span>
  <span class="nx">Stamplay</span><span class="p">.</span><span class="nx">Codeblock</span><span class="p">(</span><span class="s2">"codeblock_name"</span><span class="p">).</span><span class="nx">get</span><span class="p">(</span><span class="nx">params</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// manage the response and the error</span>
  <span class="p">})</span>
</code></pre>

<h3 id="passing-body-parameters-to-code-blocks">Passing body parameters to Code Blocks</h3>

<p>Parameters can be passed the Code Block also using <code>body</code> parameters of a <code>POST</code>, <code>PATCH</code> or <code>PUT</code> request. All the request<code>body</code> except the reserved ones (e.g. <code>user</code>) will be propagated to the code when it runs. To take advantage of this feature, define your JavaScript function such that it accepts two arguments instead of one: the <code>context</code> and the callback <code>cb</code>.</p>

<p>All allowed URL query parameters of the Code Block request will be provided to the Code Block code in the form of <code>context.data</code> JavaScript object.</p>

<pre class="highlight shell"><code>Switch to Javascript or NodeJS view to see the Code Block sample
</code></pre>

<pre class="highlight javascript"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="nx">cb</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">cb</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="s2">"Just received this, "</span> <span class="o">+</span> <span class="nx">context</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">bodyparam</span><span class="p">);</span>
<span class="p">}</span>
</code></pre>

<pre class="highlight nodejs"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="nx">cb</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">cb</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="s2">"Just received this, "</span> <span class="o">+</span> <span class="nx">context</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">bodyparam</span><span class="p">);</span>
<span class="p">}</span>
</code></pre>

<h4 id="try-it-out-1">Try it out</h4>

<p>You can try it out with <code>curl</code> or with our SDKs. Usually query parameters are passed when using <code>GET</code> requests so the examples show how to execute a Code Block with a <code>POST</code>, <code>PATCH</code> or <code>PUT</code> request:</p>

<pre class="highlight shell"><code>  curl -X <span class="s2">"POST"</span> <span class="s2">"https://APPID.stamplayapp.com/api/codeblock/v1/run/{codeblock_name}"</span> <span class="se">\</span>
  -H <span class="s2">"Content-Type: application/json"</span> <span class="se">\</span>
  -d <span class="s2">"{</span><span class="se">\"</span><span class="s2">bodyparam</span><span class="se">\"</span><span class="s2">:</span><span class="se">\"</span><span class="s2">Stamplay</span><span class="se">\"</span><span class="s2">}"</span>

  curl -X <span class="s2">"PATCH"</span> <span class="s2">"https://APPID.stamplayapp.com/api/codeblock/v1/run/{codeblock_name}"</span> <span class="se">\</span>
  -H <span class="s2">"Content-Type: application/json"</span> <span class="se">\</span>
  -d <span class="s2">"{</span><span class="se">\"</span><span class="s2">bodyparam</span><span class="se">\"</span><span class="s2">:</span><span class="se">\"</span><span class="s2">Stamplay</span><span class="se">\"</span><span class="s2">}"</span>

  curl -X <span class="s2">"PUT"</span> <span class="s2">"https://APPID.stamplayapp.com/api/codeblock/v1/run/{codeblock_name}"</span> <span class="se">\</span>
  -H <span class="s2">"Content-Type: application/json"</span> <span class="se">\</span>
  -d <span class="s2">"{</span><span class="se">\"</span><span class="s2">bodyparam</span><span class="se">\"</span><span class="s2">:</span><span class="se">\"</span><span class="s2">Stamplay</span><span class="se">\"</span><span class="s2">}"</span>
</code></pre>

<pre class="highlight javascript"><code>  <span class="c1">//POST</span>
  <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">{</span> <span class="na">bodyparam</span> <span class="p">:</span> <span class="s2">"Stamplay"</span><span class="p">}</span>

  <span class="nx">Stamplay</span><span class="p">.</span><span class="nx">Codeblock</span><span class="p">(</span><span class="s2">"codeblock_name"</span><span class="p">).</span><span class="nx">post</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// success</span>
  <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// error</span>
  <span class="p">})</span>
  
  <span class="c1">//PUT</span>
  <span class="nx">Stamplay</span><span class="p">.</span><span class="nx">Codeblock</span><span class="p">(</span><span class="s2">"codeblock_name"</span><span class="p">).</span><span class="nx">put</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// success</span>
  <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// error</span>
  <span class="p">})</span>

  <span class="c1">//PATCH</span>
  <span class="nx">Stamplay</span><span class="p">.</span><span class="nx">Codeblock</span><span class="p">(</span><span class="s2">"codeblock_name"</span><span class="p">).</span><span class="nx">patch</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// success</span>
  <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// error</span>
  <span class="p">})</span>
</code></pre>

<pre class="highlight nodejs"><code>  <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">{</span> <span class="na">bodyparam</span> <span class="p">:</span> <span class="s2">"Stamplay"</span><span class="p">}</span>
  
  <span class="c1">//POST</span>
  <span class="nx">Stamplay</span><span class="p">.</span><span class="nx">Codeblock</span><span class="p">(</span><span class="s2">"codeblock_name"</span><span class="p">).</span><span class="nx">post</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// manage the response and the error</span>
  <span class="p">})</span>

  <span class="c1">//PUT</span>
  <span class="nx">Stamplay</span><span class="p">.</span><span class="nx">Codeblock</span><span class="p">(</span><span class="s2">"codeblock_name"</span><span class="p">).</span><span class="nx">put</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// manage the response and the error</span>
  <span class="p">})</span>
  
  <span class="c1">//PATCH</span>
  <span class="nx">Stamplay</span><span class="p">.</span><span class="nx">Codeblock</span><span class="p">(</span><span class="s2">"codeblock_name"</span><span class="p">).</span><span class="nx">patch</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// manage the response and the error</span>
  <span class="p">})</span>
</code></pre>

<h3 id="user-context-data">User Context Data</h3>

<p>When executing a Code Block, you are able to pass in data, which is set to the <code>context.data</code> property. If an active user session is in place from the origininating request, the user of the current session will be placed inside <code>context</code> on <code>context.data.user</code>.</p>

<pre class="highlight javascript"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="nx">cb</span><span class="p">)</span> <span class="p">{</span><span class="err"> </span>
  <span class="c1">//context.data contain the request body parameters </span>
  <span class="kd">var</span> <span class="nx">greet</span> <span class="o">=</span> <span class="s2">"Hello, "</span><span class="p">;</span><span class="err"> </span> <span class="err"> </span>
  <span class="c1">//Show data about logged user </span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"User with Id"</span> <span class="o">+</span> <span class="nx">context</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">_id</span> <span class="o">+</span> <span class="s2">" is logged"</span><span class="p">);</span><span class="err"> </span>
  <span class="c1">//Return a JSON response that includes logged User attribute </span>
  <span class="nx">cb</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="p">{</span> <span class="na">message</span> <span class="p">:</span> <span class="nx">greet</span> <span class="o">+</span> <span class="s2">" "</span> <span class="o">+</span> <span class="nx">context</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">displayName</span> <span class="o">+</span> <span class="s2">"!"</span>  <span class="p">});</span>
<span class="p">};</span>
</code></pre>
<pre class="highlight shell"><code>// switch to javascript or nodejs to <span class="nb">read </span>Code Block sample
</code></pre>
<pre class="highlight nodejs"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="nx">cb</span><span class="p">)</span> <span class="p">{</span><span class="err"> </span>
  <span class="c1">//context.data contain the request body parameters </span>
  <span class="kd">var</span> <span class="nx">greet</span> <span class="o">=</span> <span class="s2">"Hello, "</span><span class="p">;</span><span class="err"> </span> <span class="err"> </span>
  <span class="c1">//Show data about logged user </span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"User with Id"</span> <span class="o">+</span> <span class="nx">context</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">_id</span> <span class="o">+</span> <span class="s2">" is logged"</span><span class="p">);</span><span class="err"> </span>
  <span class="c1">//Return a JSON response that includes logged User attribute </span>
  <span class="nx">cb</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="p">{</span> <span class="na">message</span> <span class="p">:</span> <span class="nx">greet</span> <span class="o">+</span> <span class="s2">" "</span> <span class="o">+</span> <span class="nx">context</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">displayName</span> <span class="o">+</span> <span class="s2">"!"</span>  <span class="p">});</span>
<span class="p">};</span>
</code></pre>

<h2 id="managing-secret-parameters">Managing Secret Parameters</h2>

<p>You can create a Code Block that includes public or secret parameters. These parameters are made available to the Code Block code when it runs. This mechanism provides a convenient way to equip your Code Block with secret credentials necessary to communicate with external systems while preventing disclosure of these credentials to third parties.</p>

<p>For example, you could write a Code Block that sends an HTTP request to your private API and you need to use a secret token to authorize this request. The secret token to call your API can then be stored encrypted in the Code Block as a <code>secret</code>, only to be decrypted and provided to your Code Block code when it runs.</p>

<p>Code Blocks allow you to securely store these parameters within the Secrets area.</p>

<h3 id="adding-secrets">Adding Secrets</h3>

<p>Four steps are required in order to save a secret value:</p>

<ul>
  <li>
    <ol>
      <li>Navigate to the <strong>Secrets</strong> area, under the <strong>Properties</strong> tab.</li>
    </ol>
  </li>
</ul>

<p><a href="../images/cb_sec_save_1.png"><img alt="Navigate To Secrets Area" src="/images/cb_sec_save_1.png" /></a></p>

<ul>
  <li>
    <ol>
      <li>Add a <code>name</code> key and a key <code>value</code>.</li>
    </ol>
  </li>
</ul>

<p><a href="../images/cb_sec_save_2.png"><img alt="Enter A New Secret" src="/images/cb_sec_save_2.png" /></a></p>

<ul>
  <li>
    <ol>
      <li>Click the <strong>Add</strong> Button.</li>
    </ol>
  </li>
</ul>

<p><a href="../images/cb_sec_save_3.png"><img alt="Enter A New Secret" src="/images/cb_sec_save_3.png" /></a></p>

<p>Now your secret has been added and is ready for use with the Code Block.</p>

<p><a href="../images/cb_sec_save_4.png"><img alt="Enter A New Secret" src="/images/cb_sec_save_4.png" /></a></p>

<h3 id="accessing-secrets">Accessing Secrets</h3>

<pre class="highlight nodejs-always"><code>  <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="nx">cb</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">cb</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="p">{</span> <span class="na">pass_this_secret</span> <span class="p">:</span> <span class="nx">context</span><span class="p">.</span><span class="nx">secrets</span><span class="p">.</span><span class="nx">name</span> <span class="p">});</span>
  <span class="p">}</span>
</code></pre>

<p>In order to access secrets you need to use the <a href="#contextual-model">Contextual</a> or the <a href="#full-control-model">Full Control</a> programming model.</p>

<p>You'll find your secrets in the <code>context.secrets</code>, or the <code>context.data</code> object in the key that you specified from the Stamplay Editor.</p>

<p>Example shown uses the <strong>Contextual</strong> programming model.</p>

<h2 id="npm-modules">NPM Modules</h2>

<pre class="highlight nodejs-always"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="nx">cb</span><span class="p">)</span> <span class="p">{</span>

  <span class="kd">var</span> <span class="nx">Stamplay</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">"stamplay"</span><span class="p">);</span>
  <span class="kd">var</span> <span class="nx">stamplay</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Stamplay</span><span class="p">(</span><span class="s2">"APPID"</span><span class="p">,</span> <span class="s2">"APIKEY"</span><span class="p">);</span>
  <span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">"request"</span><span class="p">);</span>
  <span class="kd">var</span>  <span class="nx">_</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">"underscore"</span><span class="p">);</span>

  <span class="nx">request</span><span class="p">(</span><span class="s2">"req_url"</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span> <span class="p">{</span>

    <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">body</span><span class="p">);</span>

    <span class="kd">var</span> <span class="nx">movieFound</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">where</span><span class="p">(</span><span class="nx">result</span><span class="p">,</span> <span class="p">{</span> <span class="na">director</span> <span class="p">:</span> <span class="s2">"John Doe"</span> <span class="p">})</span>

    <span class="nx">Stamplay</span><span class="p">.</span><span class="nb">Object</span><span class="p">(</span><span class="s2">"movie"</span><span class="p">).</span><span class="nx">save</span><span class="p">(</span><span class="nx">movieFound</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">cb</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">res</span><span class="p">).</span><span class="nx">data</span><span class="p">);</span>
    <span class="p">})</span>

  <span class="p">})</span>

<span class="p">}</span>
</code></pre>

<p>When using Code Blocks you can rely on over 800 of the most popular Node.js modules available on NPM. You can use any of them in your Code Block code by simply requiring them.</p>

<p>You can browse available modules at <a href="https://canirequire.stamplayapp.com">https://canirequire.stamplayapp.com</a>.</p>

<p>If there is a module that is not list on the directory that you need, let us know at <a href="&#109;&#097;&#105;&#108;&#116;&#111;:&#115;&#117;&#112;&#112;&#111;&#114;&#116;&#064;&#115;&#116;&#097;&#109;&#112;&#108;&#097;&#121;&#046;&#099;&#111;&#109;">&#115;&#117;&#112;&#112;&#111;&#114;&#116;&#064;&#115;&#116;&#097;&#109;&#112;&#108;&#097;&#121;&#046;&#099;&#111;&#109;</a> and we can have the requested module live within 24hrs or less typically.</p>

<p>To use the <code>require</code> method, simply pass the name of the desired NPM module to <code>require</code> to include inside your Code Block as you normally may in a Node.js enviornment.</p>

<p>The example <code>require</code>s the <a href="http://underscorejs.org/">underscore</a>, <a href="https://github.com/request/request">request</a>, and <a href="https://github.com/Stamplay/stamplay-nodejs-sdk">Stamplay Node.js SDK</a>.</p>

<h2 id="common-errors">Common Errors</h2>

<p>These are some of the most common errors that you may encounter when writing Code Blocks:</p>

<h4 id="writing-code-outside-the-method-signature">Writing code outside the method signature.</h4>

<p>No code outside the main <code>module.export</code>, please. It's a tradeoff for using Code Blocks .</p>

<h4 id="async-code-not-handled-properly">Async code not handled properly.</h4>

<p>If you're writing code in Node.js, async code is the way to go. If you're having problems syncronizing your code please consider the use of libraries such as q or async which are available in our modules.</p>

<h4 id="ive-configured-a-task-that-says-on-code-block-run-then--but-its-not-working">I’ve configured a Task that says “On Code Block run then …” but it’s not working.</h4>

<p>There are several reason why the Task may not be triggered:</p>

<p>Tasks work only if the output has as <strong>Content-Type</strong> <code>application/json</code>: if you’re using the <strong>Simple</strong> or <strong>Context</strong> way to write a Code Block you can just pass null as the first argument (which is the error) and an object to the final callback, and Tasks will be triggered in the right way.</p>

<p>If you’re using the <strong>Full Control</strong> programming model, make sure to return <code>application/json</code> as Content-Type.</p>

<p>A task is triggered only if the Code Block returns a <code>200</code> status code.</p>

<p>A Code Block is currently only executed only using <code>POST</code> request, ensure that you're using the right HTTP verb.</p>

<h2 id="logs">Logs</h2>

<p>If you need to debug your Code Block to see how it behaves, check the <strong>Logs</strong> tab and you'll be able to see the <code>console.log</code> output, and the output of your Code Block from the callback, or the stack trace.</p>

<h2 id="lost-logs">Lost Logs</h2>

<p>Logs are automatically deleted after two weeks. If you have different needs, please <a href="&#109;&#097;&#105;&#108;&#116;&#111;:&#115;&#117;&#112;&#112;&#111;&#114;&#116;&#064;&#115;&#116;&#097;&#109;&#112;&#108;&#097;&#121;&#046;&#099;&#111;&#109;&#063;&#115;&#117;&#098;&#106;&#101;&#099;&#116;&#061;&#076;&#111;&#103;&#115;&#043;&#069;&#120;&#112;&#105;&#114;&#097;&#116;&#105;&#111;&#110;">let us know</a>.</p>
